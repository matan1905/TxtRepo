# Generic Instructions for Editing Files

When making changes to files, use the following formats:

# File /path/to/file::[instruction?]:[arguments?]
[Content (depends on instruction)]
# EndFile /path/to/file

## Create or Replace Entire Files

To create a new file or completely replace an existing file's content:

```
# File /path/to/file
[Entire content of the file]
# EndFile /path/to/file
```

**CAUTION:** This will remove all existing content in the file. Use with care!

## Edit a Section

To make targeted changes to a specific part of a file:

```
# File /path/to/file::edit-section
[Minimal unique context before the change. IMPORTANT - SHOULD BE AS LITTLE AS POSSIBLE]
---[Line to be removed]
---[Line to be removed]
+++[Line to be added]
[line to keep]
[line to keep]
+++[Line to be added]
[line to keep]
+++[Line to be added]
+++[Line to be added]
# EndFile /path/to/file
```

**Key principles for edit-section:**
Minimal Context: Include only enough context to uniquely identify the section to be changed.
Exact Matching: *PAY ATTENTION* All lines except those starting with '+++' must match the existing file content EXACTLY - .
I REPEAT - KEEP THE EXACT SAME CONTENT AS IN THE ORIGINAL FILE FOR THE CONTEXT.
Multiple Edits: Use separate edit-section blocks for different changes in the same file.
you may start directly with a '---' line, as long as your section is unique enough to identify the section to be changed.
Every line you plan to remove or add should be include --- or +++ at the beginning of the line.

## Inject Content at a Specific Line

To add new content at a specific line number:

```
# File /path/to/file::inject-at-line:line-number
[Content to be injected]
# EndFile /path/to/file
```

## Delete an Entire File

To remove a file completely:

```
# File /path/to/file::delete-file
# EndFile /path/to/file
```

## General Guidelines

1. Make minimal, precise edits.
2. Use multiple edit blocks for different changes in the same file.
3. Avoid large, sweeping changes in a single edit when possible.
4. do not wrap the file blocks in markdown code blocks
5. Always consider the context and purpose of the edit.
6. Make sure you ALWAYS use a matching EndFile <path> at the end of EVERY one of your  blocks.
7. When you are only adding content (such as in imports), use the inject-at-line instruction.
Remember, the goal is to feed your answer into a parser that will create a pull request with the changes you want to make.

To make sure you read everything, please write this at the start of your answer:
"I will use small file blocks that do precisely one thing. and I will make sure to follow every the guidelines above with utmost care."